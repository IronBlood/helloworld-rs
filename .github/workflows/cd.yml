name: Continuous Deployment

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  cross_building:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_postfix: ""
            release_name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_postfix: ""
            release_name: macos-aarch64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_postfix: ""
            release_name: linux-x86_64-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_postfix: ""
            release_name: linux-aarch64-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_postfix: ".exe"
            release_name: windows-x86_64

    steps:
      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
          rustup override set stable
          rustup target add --toolchain stable ${{ matrix.target }}
      - name: Checking out sources
        uses: actions/checkout@v3
      - name: Compiling for ${{ matrix.target }}
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install -y -qq gcc-aarch64-linux-gnu
          cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      - name: Compiling for ${{ matrix.target }}
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}
      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          BINARY_NAME=helloworld-rs${{ matrix.binary_postfix }}
          strip $BINARY_NAME
          tar czvf ${{ matrix.release_name }}.tar.gz $BINARY_NAME

          if [[ ${{ runner.os }} == 'Windows' ]]; then
            certutil -hashfile ${{ matrix.release_name }}.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > ${{ matrix.release_name }}.tar.gz.sha256
          else
            shasum -a 256 ${{ matrix.release_name }}.tar.gz > ${{ matrix.release_name }}.tar.gz.sha256
          fi
      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.target }}/release/${{ matrix.release_name }}.tar.gz
            target/${{ matrix.target }}/release/${{ matrix.release_name }}.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

