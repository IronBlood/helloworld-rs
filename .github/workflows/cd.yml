name: Continuous Deployment

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  cross_building:
    name: Build for ${{ matrix.os }}
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_postfix: ""
            release_name: linux-x86_64-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_postfix: ""
            release_name: linux-aarch64-gnu

    steps:
      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
          rustup override set stable
          rustup target add --toolchain stable ${{ matrix.target }}
      - name: Checking out sources
        uses: actions/checkout@v3
      - name: Compiling for ${{ matrix.target }}
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install -y -qq gcc-aarch64-linux-gnu
          cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      - name: Compiling for ${{ matrix.target }}
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}
      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          BINARY_NAME=helloworld-rs${{ matrix.binary_postfix }}
          if [[ ${{ matrix.target }} == 'aarch64-unknown-linux-gnu' ]]; then
            aarch64-linux-gnu-strip $BINARY_NAME
          else
            strip $BINARY_NAME
          fi
          tar czvf ${{ matrix.release_name }}.tar.gz $BINARY_NAME

          shasum -a 256 ${{ matrix.release_name }}.tar.gz > ${{ matrix.release_name }}.tar.gz.sha256
      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.target }}/release/${{ matrix.release_name }}.tar.gz
            target/${{ matrix.target }}/release/${{ matrix.release_name }}.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_for_macos:
    name: Build for macOS
    permissions:
      contents: write
    runs-on: macos-latest
    strategy:
      matrix:
        target: [ x86_64-apple-darwin, aarch64-apple-darwin ]
        include:
          - target: x86_64-apple-darwin
            release_name: macos-x86_64
          - target: aarch64-apple-darwin
            release_name: macos-aarch64
    steps:
      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
          rustup override set stable
          rustup target add --toolchain stable ${{ matrix.target }}
      - name: Checking out sources
        uses: actions/checkout@v3
      - name: Compiling for ${{ matrix.target }}
        run: cargo build --release --target ${{ matrix.target }}
      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          BINARY_NAME=helloworld-rs
          strip $BINARY_NAME
          tar czvf ${{ matrix.release_name }}.tar.gz $BINARY_NAME
          shasum -a 256 ${{ matrix.release_name }}.tar.gz > ${{ matrix.release_name }}.tar.gz.sha256
      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.target }}/release/${{ matrix.release_name }}.tar.gz
            target/${{ matrix.target }}/release/${{ matrix.release_name }}.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build_for_windows:
    name: Build for Windows
    permissions:
      contents: write
    runs-on: windows-latest
    steps:
      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
          rustup override set stable
      - name: Checking out sources
        uses: actions/checkout@v3
      - name: Compiling
        run: cargo build --release
      - name: Packaging final binary
        shell: bash
        run: |
          cd target/release
          strip helloworld-rs.exe
          tar czvf windows-x86_64.tar.gz helloworld-rs.exe
          certutil -hashfile windows-x86_64.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > windows-x86_64.tar.gz.sha256
      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/release/windows-x86_64.tar.gz
            target/release/windows-x86_64.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

